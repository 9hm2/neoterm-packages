name: NeoTerm Large Packages Build

on:
  workflow_dispatch:
    inputs:
      package:
        description: "Specific large package to build (optional - builds all if empty)"
        required: false

permissions:
  contents: write

jobs:
  build-large-package:
    name: Build ${{ matrix.package }} for ${{ matrix.target_arch }}
    runs-on: ubuntu-latest
    timeout-minutes: 480  # 8 hours max per large package
    strategy:
      matrix:
        target_arch: [aarch64]
        package:
          - rust
          - llvm-mingw-w64
          - llvm-mingw-w64-tools
          - dotnet-host
          - dotnet8.0
          - dotnet9.0
          - ghc
          - kotlin
          - swift
          - openjdk-17
          - openjdk-21
          - mono
          - agg
          - rust-analyzer
          - rust-bindgen
          - nodejs-lts
          - chromium
          - gcc-default
          - clang
          - swiftshader
      fail-fast: false
      max-parallel: 1  # ONE at a time - critical for disk space
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 1

      - name: Free up disk space aggressively
        run: |
          echo "Disk space before cleanup:"
          df -h

          # Remove ALL unnecessary pre-installed software
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/share/swift
          sudo rm -rf /usr/local/.ghcup
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/local/graalvm

          # Remove large packages
          sudo apt-get remove -y '^dotnet-.*' '^llvm-.*' 'php.*' '^mongodb-.*' '^mysql-.*' azure-cli google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri google-cloud-sdk || true
          sudo apt-get autoremove -y
          sudo apt-get clean

          # Clean apt cache
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /var/cache/apt/archives/*

          # Remove Docker images and containers
          docker rmi $(docker image ls -aq) 2>/dev/null || true
          docker system prune -a -f

          # Remove swap file to reclaim space
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile

          echo "Disk space after cleanup:"
          df -h

      - name: Check if package exists
        id: check
        run: |
          if [ ! -d "packages/${{ matrix.package }}" ]; then
            echo "Package ${{ matrix.package }} does not exist"
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "skip=false" >> $GITHUB_OUTPUT

      - name: Build large package with Docker
        if: steps.check.outputs.skip != 'true'
        run: |
          echo "Building large package: ${{ matrix.package }}"
          echo "This package requires significant disk space and build time"

          # Monitor disk space before build
          df -h

          ./scripts/run-docker.sh ./build-package.sh -a ${{ matrix.target_arch }} ${{ matrix.package }}

          # Monitor disk space after build
          df -h

      - name: List built packages
        if: steps.check.outputs.skip != 'true'
        run: |
          echo "Built .deb files:"
          find output -name "*.deb" -type f | sort

      - name: Rename files for artifact upload (remove colons)
        if: steps.check.outputs.skip != 'true'
        run: |
          cd output
          for file in *.deb; do
            if [[ "$file" == *":"* ]]; then
              newname="${file//:/_}"
              mv "$file" "$newname"
            fi
          done

      - name: Upload build artifacts
        if: steps.check.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: large-${{ matrix.package }}-${{ matrix.target_arch }}
          path: output/*.deb
          retention-days: 7

  publish-large-packages:
    name: Publish large packages to NeoTerm-repo
    needs: build-large-package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout NeoTerm-repo
        uses: actions/checkout@v4
        with:
          repository: 9hm2/NeoTerm-repo
          token: ${{ secrets.NEOTERM_REPO_TOKEN }}
          path: neoterm-repo

      - name: Download all large package artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./debs-large

      - name: Install repository tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev apt-utils gzip

      - name: Copy large packages to repository
        run: |
          mkdir -p neoterm-repo/dists/stable/main/binary-aarch64
          mkdir -p merged-debs

          # Merge all large package artifacts
          for pkg_dir in debs-large/large-*; do
            if [ -d "$pkg_dir" ]; then
              echo "Processing $(basename $pkg_dir)..."
              cp -v "$pkg_dir"/*.deb merged-debs/ 2>/dev/null || true
            fi
          done

          # Restore colons in filenames
          cd merged-debs
          for file in *.deb; do
            if [[ "$file" == *"_"* ]]; then
              newname="${file//_/:}"
              if [[ "$newname" != "$file" ]]; then
                mv "$file" "$newname" 2>/dev/null || true
              fi
            fi
          done
          cd ..

          # Copy to pool with proper directory structure
          total=0
          for deb in merged-debs/*.deb; do
            if [ -f "$deb" ]; then
              filename=$(basename "$deb")
              # Extract package name (first part before _)
              pkgname=$(echo "$filename" | cut -d'_' -f1 | cut -d':' -f1)

              # Determine first letter/prefix for directory structure
              firstchar=$(echo "$pkgname" | head -c 1)

              # Handle lib* packages specially
              if [[ "$pkgname" == lib* ]]; then
                if [ ${#pkgname} -gt 4 ]; then
                  prefix="lib${pkgname:3:1}"  # lib + 4th character
                else
                  prefix="lib"
                fi
              else
                prefix="$firstchar"
              fi

              # Create directory structure: pool/main/prefix/pkgname/
              targetdir="neoterm-repo/pool/main/$prefix/$pkgname"
              mkdir -p "$targetdir"

              cp "$deb" "$targetdir/"
              ((total++))
            fi
          done

          echo "Total large packages copied to repository: $total"

      - name: Generate repository metadata
        run: |
          cd neoterm-repo

          # Generate Packages file
          dpkg-scanpackages --arch aarch64 pool/ > dists/stable/main/binary-aarch64/Packages

          # Compress
          gzip -k -f dists/stable/main/binary-aarch64/Packages

          # Generate Release
          cd dists/stable
          cat > Release << EOF
          Origin: NeoTerm
          Label: NeoTerm Packages
          Suite: stable
          Codename: stable
          Architectures: aarch64
          Components: main
          Description: NeoTerm complete package repository (Termux-compatible)
          Date: $(date -R)
          EOF

          # Checksums
          echo "MD5Sum:" >> Release
          find main -type f -exec md5sum {} \; | sed 's/main/ main/' >> Release

          echo "SHA256:" >> Release
          find main -type f -exec sha256sum {} \; | sed 's/main/ main/' >> Release

      - name: Commit and push to NeoTerm-repo
        run: |
          cd neoterm-repo
          git config user.name "NeoTerm Bot"
          git config user.email "bot@neoterm.io"
          git add .
          git commit -m "chore: update large packages ($(date +%Y-%m-%d))" || exit 0
          git push

  cleanup:
    name: Cleanup large package artifacts
    needs: publish-large-packages
    runs-on: ubuntu-latest
    steps:
      - name: Delete large package artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: large-*
          failOnError: false
