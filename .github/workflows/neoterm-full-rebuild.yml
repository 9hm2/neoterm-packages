name: NeoTerm Full Repository Rebuild

on:
  workflow_dispatch:
    inputs:
      batch_number:
        description: "Batch number to build (1-20, or 'all' for everything)"
        required: false
        default: '1'

permissions:
  contents: write

jobs:
  build-batch:
    name: Build batch ${{ matrix.batch }} for ${{ matrix.target_arch }}
    runs-on: ubuntu-latest
    timeout-minutes: 240  # 4 hours max per batch
    strategy:
      matrix:
        target_arch: [aarch64]
        batch: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200]
      fail-fast: false
      max-parallel: 1  # Sequential - one batch at a time to avoid disk space issues
    steps:
      - name: Free up disk space BEFORE checkout
        run: |
          echo "Disk space before cleanup:"
          df -h

          # Remove EVERYTHING unnecessary
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /opt/hostedtoolcache/go
          sudo rm -rf /opt/hostedtoolcache/PyPy
          sudo rm -rf /opt/hostedtoolcache/node
          sudo rm -rf /opt/az
          sudo rm -rf /opt/google
          sudo rm -rf /opt/microsoft
          sudo rm -rf /usr/share/swift
          sudo rm -rf /usr/local/.ghcup
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/local/graalvm
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/lib/node_modules

          # Remove large packages
          sudo apt-get remove -y '^dotnet-.*' '^llvm-.*' 'php.*' '^mongodb-.*' '^mysql-.*' azure-cli google-chrome-stable firefox powershell mono-devel || true
          sudo apt-get autoremove -y
          sudo apt-get clean

          # Clean Docker completely
          docker system prune -a -f --volumes

          echo "Disk space after cleanup:"
          df -h

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 1

      - name: Determine packages for this batch
        id: packages
        run: |
          # Get all packages except large ones
          LARGE_PACKAGES="rust llvm-mingw-w64 llvm-mingw-w64-tools dotnet-host dotnet8.0 dotnet9.0 ghc kotlin swift openjdk-17 openjdk-21 mono agg rust-analyzer rust-bindgen nodejs-lts chromium gcc-default clang swiftshader"

          ALL_PACKAGES=$(ls packages/ | sort)

          # Filter out large packages
          FILTERED_PACKAGES=""
          for pkg in $ALL_PACKAGES; do
            skip=false
            for large in $LARGE_PACKAGES; do
              if [ "$pkg" = "$large" ]; then
                skip=true
                break
              fi
            done
            if [ "$skip" = false ]; then
              FILTERED_PACKAGES="$FILTERED_PACKAGES$pkg\n"
            fi
          done

          ALL_PACKAGES=$(echo -e "$FILTERED_PACKAGES" | grep -v '^$')
          TOTAL=$(echo "$ALL_PACKAGES" | wc -l)

          # Calculate batch size (10 packages per batch - VERY small to avoid disk space issues)
          BATCH_SIZE=10
          BATCH_NUM=${{ matrix.batch }}

          # Skip if batch number is beyond total batches needed
          TOTAL_BATCHES=$(( ($TOTAL + $BATCH_SIZE - 1) / $BATCH_SIZE ))
          if [ $BATCH_NUM -gt $TOTAL_BATCHES ]; then
            echo "Batch $BATCH_NUM not needed (only $TOTAL_BATCHES batches required)"
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Calculate start and end for this batch
          START=$(( ($BATCH_NUM - 1) * $BATCH_SIZE + 1 ))
          END=$(( $BATCH_NUM * $BATCH_SIZE ))

          echo "Building batch $BATCH_NUM: packages $START to $END (out of $TOTAL regular packages)"
          echo "Note: Large packages (rust, llvm, dotnet, etc.) are built separately"

          # Get packages for this batch
          PACKAGES=$(echo "$ALL_PACKAGES" | sed -n "${START},${END}p" | tr '\n' ' ')

          echo "Packages in this batch: $(echo $PACKAGES | wc -w)"
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

      - name: Build packages with Docker
        if: steps.packages.outputs.skip != 'true'
        env:
          PACKAGES: ${{ steps.packages.outputs.packages }}
        run: |
          echo "Building batch ${{ matrix.batch }}: $PACKAGES"
          df -h
          ./scripts/run-docker.sh ./build-package.sh -a ${{ matrix.target_arch }} $PACKAGES

      - name: Cleanup Docker after build
        if: steps.packages.outputs.skip != 'true'
        run: |
          echo "Cleaning up Docker to free space..."
          docker system prune -a -f --volumes
          df -h

      - name: List built packages
        if: steps.packages.outputs.skip != 'true'
        run: |
          echo "Built .deb files:"
          find output -name "*.deb" -type f | sort

      - name: Rename files for artifact upload (remove colons)
        if: steps.packages.outputs.skip != 'true'
        run: |
          cd output
          for file in *.deb; do
            if [[ "$file" == *":"* ]]; then
              newname="${file//:/_}"
              mv "$file" "$newname"
            fi
          done

      - name: Upload build artifacts
        if: steps.packages.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: debs-batch-${{ matrix.batch }}-${{ matrix.target_arch }}
          path: output/*.deb
          retention-days: 7

  publish-all:
    name: Publish all batches to NeoTerm-repo
    needs: build-batch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout NeoTerm-repo
        uses: actions/checkout@v4
        with:
          repository: 9hm2/NeoTerm-repo
          token: ${{ secrets.NEOTERM_REPO_TOKEN }}
          path: neoterm-repo

      - name: Download all batch artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./debs-all

      - name: Install repository tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev apt-utils gzip

      - name: Merge and copy packages to repository
        run: |
          mkdir -p neoterm-repo/dists/stable/main/binary-aarch64
          mkdir -p merged-debs

          # Merge all batch artifacts
          for batch_dir in debs-all/debs-batch-*; do
            if [ -d "$batch_dir" ]; then
              echo "Processing $(basename $batch_dir)..."
              cp -v "$batch_dir"/*.deb merged-debs/ 2>/dev/null || true
            fi
          done

          # Restore colons in filenames
          cd merged-debs
          for file in *.deb; do
            if [[ "$file" == *"_"* ]]; then
              newname="${file//_/:}"
              if [[ "$newname" != "$file" ]]; then
                mv "$file" "$newname" 2>/dev/null || true
              fi
            fi
          done
          cd ..

          # Copy to pool with proper directory structure
          total=0
          for deb in merged-debs/*.deb; do
            if [ -f "$deb" ]; then
              filename=$(basename "$deb")
              # Extract package name (first part before _)
              pkgname=$(echo "$filename" | cut -d'_' -f1 | cut -d':' -f1)

              # Determine first letter/prefix for directory structure
              firstchar=$(echo "$pkgname" | head -c 1)

              # Handle lib* packages specially
              if [[ "$pkgname" == lib* ]]; then
                if [ ${#pkgname} -gt 4 ]; then
                  prefix="lib${pkgname:3:1}"  # lib + 4th character
                else
                  prefix="lib"
                fi
              else
                prefix="$firstchar"
              fi

              # Create directory structure: pool/main/prefix/pkgname/
              targetdir="neoterm-repo/pool/main/$prefix/$pkgname"
              mkdir -p "$targetdir"

              cp "$deb" "$targetdir/"
              ((total++))
            fi
          done

          echo "Total packages copied to repository: $total"

      - name: Generate repository metadata
        run: |
          cd neoterm-repo

          # Generate Packages file
          dpkg-scanpackages --arch aarch64 pool/ > dists/stable/main/binary-aarch64/Packages

          # Compress
          gzip -k -f dists/stable/main/binary-aarch64/Packages

          # Generate Release
          cd dists/stable
          cat > Release << EOF
          Origin: NeoTerm
          Label: NeoTerm Packages
          Suite: stable
          Codename: stable
          Architectures: aarch64
          Components: main
          Description: NeoTerm complete package repository (Termux-compatible)
          Date: $(date -R)
          EOF

          # Checksums
          echo "MD5Sum:" >> Release
          find main -type f -exec md5sum {} \; | sed 's/main/ main/' >> Release

          echo "SHA256:" >> Release
          find main -type f -exec sha256sum {} \; | sed 's/main/ main/' >> Release

      - name: Commit and push to NeoTerm-repo
        run: |
          cd neoterm-repo
          git config user.name "NeoTerm Bot"
          git config user.email "bot@neoterm.io"
          git add .
          git commit -m "chore: full repository rebuild ($(date +%Y-%m-%d))" || exit 0
          git push

  cleanup:
    name: Cleanup batch artifacts
    needs: publish-all
    runs-on: ubuntu-latest
    steps:
      - name: Delete batch artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: debs-batch-*
          failOnError: false
